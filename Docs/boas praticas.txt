SOLID
	Single responsibility principle
		Usuario e logins em classes diferentes
	Open-closed principle
		Com um coportamento novo a classe nao pode perder o comportamento antigo
		Tentar nao fazer abstraçoes com muitas especificidades
	Liskov
		A classe pai deve ser capaz dew substituir a classe filha
		Nao implementar metodos na classe pai que nao vai ser implementados na classe filho
	Interface segregation
		Nao criar interfaces que obriguem a implementar metodos que nao sao usados
	Dependenci inversion principle
		Abstrações nao devem depender de detalhes de implementaçao
	
		
pattern
	tem alguma coisa de bridge pois na arquitetura poco
	chain of responsibility
	
herança
	Estende atributos e métodos de uma classe;
Composiçao
	objeto pai da acesso aos filhos
	
	

clean code
	ordernacao
		cada variavel deve ter o nome correto
	sistematizar
		cada coisa no seu lugar
		um codigo deve estar onde se espera
	limpeza
		nao mantenha codigos inuteis
	padronizacao
		o time trabalha da mesma forma
	disciplina
		siga as regras e escreva um codigo legivel
		